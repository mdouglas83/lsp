// FB LSP API - Tables
//
// Generated by CABEM YamJam targeting http://lsp-api.cabemdev.net/v1 @ version 0.0.1

import { DataGridV2 } from "cabem-react-next";
import {
  createInfiniteScroll,
  connectDataGrid,
  connectFilterNoSave,
} from "cabem-react-redux";
import { filterDefinitionsMap } from "./reducers";
import formatters from "./util/formatters";

// Generated DataGrid for EntityInstrumentPositionsDataGrid
const EntityInstrumentPositionsDataGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseEntityInstrumentPositionsDataGridResponse = (response) => ({
  tableData: response.PositionTableResponse.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.PositionTableResponse.totalRecords,
});

export const EntityInstrumentPositionsDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentPositionsGet(
    EntityInstrumentPositionsDataGridFormatParams(queryParams),
  );
};

class _EntityInstrumentPositionsDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentPositionsDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["EntityInstrumentPositionsDataGrid"];
    this.filterOptionsUrl = "/positions-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentPositionsCSVGet(
        EntityInstrumentPositionsDataGridFormatParams(params),
      )
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentPositionsDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.PositionsFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.positionsFilterOptionsGet(
      EntityInstrumentPositionsDataGridFormatParams(params),
    );
  };

  getRows = (params) => EntityInstrumentPositionsDataGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_EntityInstrumentPositionsDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentPositionsDataGrid",
  parseTableDataResponse: parseEntityInstrumentPositionsDataGridResponse,
  getRows: EntityInstrumentPositionsDataGridGetRows,
};

export const EntityInstrumentPositionsDataGrid = connectFilterNoSave(
  _EntityInstrumentPositionsDataGrid,
  "EntityInstrumentPositionsDataGrid",
);

// Generated DataGrid for PositionScheduledActivitiesDataGrid
const PositionScheduledActivitiesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["DueDate"])
    formattedParams["DueDate"] = formatters.daterange(params["DueDate"]);
  if (params["EffectiveDate"])
    formattedParams["EffectiveDate"] = formatters.daterange(
      params["EffectiveDate"],
    );
  return formattedParams;
};

export const parsePositionScheduledActivitiesDataGridResponse = (response) => ({
  tableData: response.PositionScheduledActivitiesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.PositionScheduledActivitiesGetResult.totalRecords,
});

export const PositionScheduledActivitiesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentScheduledActivitiesGet(
    PositionScheduledActivitiesDataGridFormatParams(queryParams),
  );
};

class _PositionScheduledActivitiesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "PositionScheduledActivitiesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["PositionScheduledActivitiesDataGrid"];
    this.filterOptionsUrl = "/position-scheduled-activities-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentScheduledActivitiesCSVGet(
        PositionScheduledActivitiesDataGridFormatParams(params),
      )
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parsePositionScheduledActivitiesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.PositionActivitiesFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.positionScheduledActivitiesFilterOptionsGet(
      PositionScheduledActivitiesDataGridFormatParams(params),
    );
  };

  getRows = (params) => PositionScheduledActivitiesDataGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_PositionScheduledActivitiesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "PositionScheduledActivitiesDataGrid",
  parseTableDataResponse: parsePositionScheduledActivitiesDataGridResponse,
  getRows: PositionScheduledActivitiesDataGridGetRows,
};

export const PositionScheduledActivitiesDataGrid = connectFilterNoSave(
  _PositionScheduledActivitiesDataGrid,
  "PositionScheduledActivitiesDataGrid",
);

// Generated DataGrid for EntityInstrumentPrincipalActivitiesDataGrid
const EntityInstrumentPrincipalActivitiesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["BalanceDate"])
    formattedParams["BalanceDate"] = formatters.daterange(
      params["BalanceDate"],
    );
  return formattedParams;
};

export const parseEntityInstrumentPrincipalActivitiesDataGridResponse = (
  response,
) => ({
  tableData:
    response.EntityInstrumentPrincipalActivitiesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.EntityInstrumentPrincipalActivitiesGetResult.totalRecords,
});

export const EntityInstrumentPrincipalActivitiesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentPrincipalActivitiesGet(
    EntityInstrumentPrincipalActivitiesDataGridFormatParams(queryParams),
  );
};

class _EntityInstrumentPrincipalActivitiesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentPrincipalActivitiesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["EntityInstrumentPrincipalActivitiesDataGrid"];
    this.filterOptionsUrl = "/entity-instruments/principal-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentPrincipalActivitiesCSVGet(
        EntityInstrumentPrincipalActivitiesDataGridFormatParams(params),
      )
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentPrincipalActivitiesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.principalFilterOptionsGet(
      EntityInstrumentPrincipalActivitiesDataGridFormatParams(params),
    );
  };

  getRows = (params) =>
    EntityInstrumentPrincipalActivitiesDataGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_EntityInstrumentPrincipalActivitiesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentPrincipalActivitiesDataGrid",
  parseTableDataResponse:
    parseEntityInstrumentPrincipalActivitiesDataGridResponse,
  getRows: EntityInstrumentPrincipalActivitiesDataGridGetRows,
};

export const EntityInstrumentPrincipalActivitiesDataGrid = connectFilterNoSave(
  _EntityInstrumentPrincipalActivitiesDataGrid,
  "EntityInstrumentPrincipalActivitiesDataGrid",
);

// Generated DataGrid for HistoryDataGrid
const HistoryDataGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["historyDateRange"])
    formattedParams["historyDateRange"] = formatters.daterange(
      params["historyDateRange"],
    );
  return formattedParams;
};

export const parseHistoryDataGridResponse = (response) => ({
  tableData: response.HistoryGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.HistoryGetResult.totalRecords,
});

export const HistoryDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentHistoryGet(
    HistoryDataGridFormatParams(queryParams),
  );
};

class _HistoryDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "HistoryDataGrid";

    this.filterDefinitions = filterDefinitionsMap["HistoryDataGrid"];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentHistoryCSVGet(HistoryDataGridFormatParams(params))
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) => parseHistoryDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      HistoryDataGridFormatParams(params),
    );
  };

  getRows = (params) => HistoryDataGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_HistoryDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "HistoryDataGrid",
  parseTableDataResponse: parseHistoryDataGridResponse,
  getRows: HistoryDataGridGetRows,
};

export const HistoryDataGrid = connectFilterNoSave(
  _HistoryDataGrid,
  "HistoryDataGrid",
);

// Generated DataGrid for EntityInstrumentCashGrid
const EntityInstrumentCashGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["CashDateRange"])
    formattedParams["CashDateRange"] = formatters.daterange(
      params["CashDateRange"],
    );
  return formattedParams;
};

export const parseEntityInstrumentCashGridResponse = (response) => ({
  tableData: response.EntityInstrumentCashGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.EntityInstrumentCashGetResult.totalRecords,
});

export const EntityInstrumentCashGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentCashGet(
    EntityInstrumentCashGridFormatParams(queryParams),
  );
};

class _EntityInstrumentCashGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentCashGrid";

    this.filterDefinitions = filterDefinitionsMap["EntityInstrumentCashGrid"];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentCashCSVGet(EntityInstrumentCashGridFormatParams(params))
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentCashGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      EntityInstrumentCashGridFormatParams(params),
    );
  };

  getRows = (params) => EntityInstrumentCashGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_EntityInstrumentCashGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentCashGrid",
  parseTableDataResponse: parseEntityInstrumentCashGridResponse,
  getRows: EntityInstrumentCashGridGetRows,
};

export const EntityInstrumentCashGrid = connectFilterNoSave(
  _EntityInstrumentCashGrid,
  "EntityInstrumentCashGrid",
);

// Generated DataGrid for EntityInstrumentFeesGrid
const EntityInstrumentFeesGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseEntityInstrumentFeesGridResponse = (response) => ({
  tableData: response.EntityInstrumentFeesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.EntityInstrumentFeesGetResult.totalRecords,
});

export const EntityInstrumentFeesGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentFeesGet(
    EntityInstrumentFeesGridFormatParams(queryParams),
  );
};

class _EntityInstrumentFeesGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentFeesGrid";

    this.filterDefinitions = filterDefinitionsMap["EntityInstrumentFeesGrid"];
    this.filterOptionsUrl = "/entity-instrument/fee-filter-options";
  }

  getCsv() {
    const {
      gridRowsPerPage,
      gridPage,
      gridSortColumn,
      gridSortAscending,
      idEntityInstrument,
    } = this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    params["idEntityInstrument"] = idEntityInstrument;

    globalThis.cabemClient
      .entityInstrumentFeesCSVGet(EntityInstrumentFeesGridFormatParams(params))
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentFeesGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.EntityInstrumentFeeFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.entityInstrumentFeeFilterOptionsGet(
      EntityInstrumentFeesGridFormatParams(params),
    );
  };

  getRows = (params) => EntityInstrumentFeesGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_EntityInstrumentFeesGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentFeesGrid",
  parseTableDataResponse: parseEntityInstrumentFeesGridResponse,
  getRows: EntityInstrumentFeesGridGetRows,
};

export const EntityInstrumentFeesGrid = connectFilterNoSave(
  _EntityInstrumentFeesGrid,
  "EntityInstrumentFeesGrid",
);

// Generated DataGrid for ScheduledActivityCashTransactionActivitiesDataGrid
const ScheduledActivityCashTransactionActivitiesDataGridFormatParams = (
  params,
) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseScheduledActivityCashTransactionActivitiesDataGridResponse = (
  response,
) => ({
  tableData:
    response.ScheduledActivityCashTransactionsGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.ScheduledActivityCashTransactionsGetResult.totalRecords,
});

export const ScheduledActivityCashTransactionActivitiesDataGridGetRows = (
  params,
) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.scheduledActivityCashTransactionsGet(
    ScheduledActivityCashTransactionActivitiesDataGridFormatParams(queryParams),
  );
};

class _ScheduledActivityCashTransactionActivitiesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "ScheduledActivityCashTransactionActivitiesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap[
        "ScheduledActivityCashTransactionActivitiesDataGrid"
      ];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseScheduledActivityCashTransactionActivitiesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    const { idPositionScheduledActivity } = this.props;

    params["idPositionScheduledActivity"] = idPositionScheduledActivity;

    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      ScheduledActivityCashTransactionActivitiesDataGridFormatParams(params),
    );
  };

  getRows = (params) =>
    ScheduledActivityCashTransactionActivitiesDataGridGetRows(params);
  expectFetchParams = () => ["idPositionScheduledActivity"];
}

_ScheduledActivityCashTransactionActivitiesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "ScheduledActivityCashTransactionActivitiesDataGrid",
  parseTableDataResponse:
    parseScheduledActivityCashTransactionActivitiesDataGridResponse,
  getRows: ScheduledActivityCashTransactionActivitiesDataGridGetRows,
};

export const ScheduledActivityCashTransactionActivitiesDataGrid =
  connectFilterNoSave(
    _ScheduledActivityCashTransactionActivitiesDataGrid,
    "ScheduledActivityCashTransactionActivitiesDataGrid",
  );

// Generated DataGrid for ScheduledActivityBalanceActivitiesDataGrid
const ScheduledActivityBalanceActivitiesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseScheduledActivityBalanceActivitiesDataGridResponse = (
  response,
) => ({
  tableData:
    response.ScheduledActivityBalanceActivitiesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.ScheduledActivityBalanceActivitiesGetResult.totalRecords,
});

export const ScheduledActivityBalanceActivitiesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.scheduledActivityBalanceActivitiesGet(
    ScheduledActivityBalanceActivitiesDataGridFormatParams(queryParams),
  );
};

class _ScheduledActivityBalanceActivitiesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "ScheduledActivityBalanceActivitiesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["ScheduledActivityBalanceActivitiesDataGrid"];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseScheduledActivityBalanceActivitiesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    const { idPositionScheduledActivity } = this.props;

    params["idPositionScheduledActivity"] = idPositionScheduledActivity;

    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      ScheduledActivityBalanceActivitiesDataGridFormatParams(params),
    );
  };

  getRows = (params) =>
    ScheduledActivityBalanceActivitiesDataGridGetRows(params);
  expectFetchParams = () => ["idPositionScheduledActivity"];
}

_ScheduledActivityBalanceActivitiesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "ScheduledActivityBalanceActivitiesDataGrid",
  parseTableDataResponse:
    parseScheduledActivityBalanceActivitiesDataGridResponse,
  getRows: ScheduledActivityBalanceActivitiesDataGridGetRows,
};

export const ScheduledActivityBalanceActivitiesDataGrid = connectFilterNoSave(
  _ScheduledActivityBalanceActivitiesDataGrid,
  "ScheduledActivityBalanceActivitiesDataGrid",
);

// Generated DataGrid for ScheduledActivityIncomeActivitiesDataGrid
const ScheduledActivityIncomeActivitiesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseScheduledActivityIncomeActivitiesDataGridResponse = (
  response,
) => ({
  tableData:
    response.ScheduledActivityIncomeActivitiesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.ScheduledActivityIncomeActivitiesGetResult.totalRecords,
});

export const ScheduledActivityIncomeActivitiesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.scheduledActivityIncomeActivitiesGet(
    ScheduledActivityIncomeActivitiesDataGridFormatParams(queryParams),
  );
};

class _ScheduledActivityIncomeActivitiesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "ScheduledActivityIncomeActivitiesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["ScheduledActivityIncomeActivitiesDataGrid"];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseScheduledActivityIncomeActivitiesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    const { idPositionScheduledActivity } = this.props;

    params["idPositionScheduledActivity"] = idPositionScheduledActivity;

    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      ScheduledActivityIncomeActivitiesDataGridFormatParams(params),
    );
  };

  getRows = (params) =>
    ScheduledActivityIncomeActivitiesDataGridGetRows(params);
  expectFetchParams = () => ["idPositionScheduledActivity"];
}

_ScheduledActivityIncomeActivitiesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "ScheduledActivityIncomeActivitiesDataGrid",
  parseTableDataResponse:
    parseScheduledActivityIncomeActivitiesDataGridResponse,
  getRows: ScheduledActivityIncomeActivitiesDataGridGetRows,
};

export const ScheduledActivityIncomeActivitiesDataGrid = connectFilterNoSave(
  _ScheduledActivityIncomeActivitiesDataGrid,
  "ScheduledActivityIncomeActivitiesDataGrid",
);

// Generated DataGrid for BaseRatesDataGrid
const BaseRatesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["asOfDateRange"])
    formattedParams["asOfDateRange"] = formatters.daterange(
      params["asOfDateRange"],
    );
  return formattedParams;
};

export const parseBaseRatesDataGridResponse = (response) => ({
  tableData: response.BaseRatesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.BaseRatesGetResult.totalRecords,
});

export const BaseRatesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.baseRatesGet(
    BaseRatesDataGridFormatParams(queryParams),
  );
};

class _BaseRatesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "BaseRatesDataGrid";

    this.filterDefinitions = filterDefinitionsMap["BaseRatesDataGrid"];
    this.filterOptionsUrl = "/base-rates-filter-options";
  }

  getCsv() {
    const { gridRowsPerPage, gridPage, gridSortColumn, gridSortAscending } =
      this.props;
    let params = {
      tableKey: this.getTableKey(),
      resultsPerPage: gridRowsPerPage,
      currentPage: gridPage,
      columns: this.getActiveColumns(),
      sortColumn: gridSortColumn,
      sortAscending: gridSortAscending,
      ...this.getActiveFilters(),
    };

    globalThis.cabemClient
      .baseRatesCSVGet(BaseRatesDataGridFormatParams(params))
      .then((blob) => {
        let url = window.URL.createObjectURL(blob);
        let a = document.createElement("a");
        a.href = url;

        let date = new Date(),
          year = date.getFullYear(),
          month = date.getMonth() + 1,
          dayDate = date.getDate(),
          hours = date.getUTCHours(),
          minutes = date.getMinutes(),
          seconds = date.getSeconds(),
          tableKey = this.getTableKey();

        let filename = `Export_${tableKey}_${year}-${month}-${dayDate}_${hours}${minutes}${seconds}.csv`;
        a.download = filename;
        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
        a.click();
        a.remove(); //afterwards we remove the element again
      });
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseBaseRatesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.BaseRateFilters.filters;
  };

  getFilters = (url, params) => {
    return globalThis.cabemClient.baseRatesFilterOptionsGet(
      BaseRatesDataGridFormatParams(params),
    );
  };

  getRows = (params) => BaseRatesDataGridGetRows(params);
  expectFetchParams = () => [];
}

_BaseRatesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "BaseRatesDataGrid",
  parseTableDataResponse: parseBaseRatesDataGridResponse,
  getRows: BaseRatesDataGridGetRows,
};

export const BaseRatesDataGrid = connectFilterNoSave(
  _BaseRatesDataGrid,
  "BaseRatesDataGrid",
);

// Generated DataGrid for EntityInstrumentRatesDataGrid
const EntityInstrumentRatesDataGridFormatParams = (params) => {
  let formattedParams = { ...params };
  if (params["effectiveDateRange"])
    formattedParams["effectiveDateRange"] = formatters.daterange(
      params["effectiveDateRange"],
    );
  return formattedParams;
};

export const parseEntityInstrumentRatesDataGridResponse = (response) => ({
  tableData: response.EntityInstrumentRatesGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.EntityInstrumentRatesGetResult.totalRecords,
});

export const EntityInstrumentRatesDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentRatesGet(
    EntityInstrumentRatesDataGridFormatParams(queryParams),
  );
};

class _EntityInstrumentRatesDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentRatesDataGrid";

    this.filterDefinitions =
      filterDefinitionsMap["EntityInstrumentRatesDataGrid"];
    this.filterOptionsUrl = "/entity-instrument-rates-filter-options";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentRatesDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.EntityInstrumentRatesFilters.filters;
  };

  getFilters = (url, params) => {
    const { idEntityInstrument } = this.props;

    params["idEntityInstrument"] = idEntityInstrument;

    return globalThis.cabemClient.entityInstrumentRatesFilterOptionsGet(
      EntityInstrumentRatesDataGridFormatParams(params),
    );
  };

  getRows = (params) => EntityInstrumentRatesDataGridGetRows(params);
  expectFetchParams = () => ["idEntityInstrument"];
}

_EntityInstrumentRatesDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentRatesDataGrid",
  parseTableDataResponse: parseEntityInstrumentRatesDataGridResponse,
  getRows: EntityInstrumentRatesDataGridGetRows,
};

export const EntityInstrumentRatesDataGrid = connectFilterNoSave(
  _EntityInstrumentRatesDataGrid,
  "EntityInstrumentRatesDataGrid",
);

// Generated DataGrid for EntityInstrumentCashActivityDataGrid
const EntityInstrumentCashActivityDataGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseEntityInstrumentCashActivityDataGridResponse = (
  response,
) => ({
  tableData: response.EntityInstrumentCashActivityGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.EntityInstrumentCashActivityGetResult.totalRecords,
});

export const EntityInstrumentCashActivityDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentCashActivityGet(
    EntityInstrumentCashActivityDataGridFormatParams(queryParams),
  );
};

class _EntityInstrumentCashActivityDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentCashActivityDataGrid";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentCashActivityDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.filters;
  };

  getRows = (params) => EntityInstrumentCashActivityDataGridGetRows(params);
  expectFetchParams = () => [];
}

_EntityInstrumentCashActivityDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentCashActivityDataGrid",
  parseTableDataResponse: parseEntityInstrumentCashActivityDataGridResponse,
  getRows: EntityInstrumentCashActivityDataGridGetRows,
};

export const EntityInstrumentCashActivityDataGrid = connectDataGrid(
  _EntityInstrumentCashActivityDataGrid,
  "EntityInstrumentCashActivityDataGrid",
);

// Generated DataGrid for EntityInstrumentLoanActivityDataGrid
const EntityInstrumentLoanActivityDataGridFormatParams = (params) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseEntityInstrumentLoanActivityDataGridResponse = (
  response,
) => ({
  tableData: response.EntityInstrumentLoanActivityGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords: response.EntityInstrumentLoanActivityGetResult.totalRecords,
});

export const EntityInstrumentLoanActivityDataGridGetRows = (params) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.entityInstrumentLoanActivityGet(
    EntityInstrumentLoanActivityDataGridFormatParams(queryParams),
  );
};

class _EntityInstrumentLoanActivityDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "EntityInstrumentLoanActivityDataGrid";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseEntityInstrumentLoanActivityDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.filters;
  };

  getRows = (params) => EntityInstrumentLoanActivityDataGridGetRows(params);
  expectFetchParams = () => [];
}

_EntityInstrumentLoanActivityDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "EntityInstrumentLoanActivityDataGrid",
  parseTableDataResponse: parseEntityInstrumentLoanActivityDataGridResponse,
  getRows: EntityInstrumentLoanActivityDataGridGetRows,
};

export const EntityInstrumentLoanActivityDataGrid = connectDataGrid(
  _EntityInstrumentLoanActivityDataGrid,
  "EntityInstrumentLoanActivityDataGrid",
);

// Generated DataGrid for ScheduledActivityLinkableCashTransactionsDataGrid
const ScheduledActivityLinkableCashTransactionsDataGridFormatParams = (
  params,
) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseScheduledActivityLinkableCashTransactionsDataGridResponse = (
  response,
) => ({
  tableData:
    response.ScheduledActivityLinkableCashTransactionsGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.ScheduledActivityLinkableCashTransactionsGetResult.totalRecords,
});

export const ScheduledActivityLinkableCashTransactionsDataGridGetRows = (
  params,
) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.scheduledActivityLinkableCashTransactionsGet(
    ScheduledActivityLinkableCashTransactionsDataGridFormatParams(queryParams),
  );
};

class _ScheduledActivityLinkableCashTransactionsDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "ScheduledActivityLinkableCashTransactionsDataGrid";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseScheduledActivityLinkableCashTransactionsDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.filters;
  };

  getRows = (params) =>
    ScheduledActivityLinkableCashTransactionsDataGridGetRows(params);
  expectFetchParams = () => ["idPositionScheduledActivity"];
}

_ScheduledActivityLinkableCashTransactionsDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "ScheduledActivityLinkableCashTransactionsDataGrid",
  parseTableDataResponse:
    parseScheduledActivityLinkableCashTransactionsDataGridResponse,
  getRows: ScheduledActivityLinkableCashTransactionsDataGridGetRows,
};

export const ScheduledActivityLinkableCashTransactionsDataGrid =
  connectDataGrid(
    _ScheduledActivityLinkableCashTransactionsDataGrid,
    "ScheduledActivityLinkableCashTransactionsDataGrid",
  );

// Generated DataGrid for ScheduledActivityLinkedCashTransactionsDataGrid
const ScheduledActivityLinkedCashTransactionsDataGridFormatParams = (
  params,
) => {
  let formattedParams = { ...params };

  return formattedParams;
};

export const parseScheduledActivityLinkedCashTransactionsDataGridResponse = (
  response,
) => ({
  tableData:
    response.ScheduledActivityLinkedCashTransactionsGetResult.tableData || [], //Empty array to prevent page crash if somehow endpoint returns null
  totalRecords:
    response.ScheduledActivityLinkedCashTransactionsGetResult.totalRecords,
});

export const ScheduledActivityLinkedCashTransactionsDataGridGetRows = (
  params,
) => {
  const { currentPage, sortProperties, pageSize, ...additional } = params,
    queryParams = {
      currentPage: params.currentPage,
      sortColumn: params.sortProperties[0].id ?? "",
      sortAscending: params.sortProperties[0].sortAscending ?? false,
      resultsPerPage: params.pageSize,
      ...additional,
    };

  return globalThis.cabemClient.scheduledActivityLinkedCashTransactionsGet(
    ScheduledActivityLinkedCashTransactionsDataGridFormatParams(queryParams),
  );
};

class _ScheduledActivityLinkedCashTransactionsDataGrid extends DataGridV2 {
  constructor() {
    super();

    this.tableKey = "ScheduledActivityLinkedCashTransactionsDataGrid";
  }

  testResponseSuccess = (response) => true;
  parseTableDataResponse = (response) =>
    parseScheduledActivityLinkedCashTransactionsDataGridResponse(response);
  parseFiltersResponse = (response) => {
    return response.filters;
  };

  getRows = (params) =>
    ScheduledActivityLinkedCashTransactionsDataGridGetRows(params);
  expectFetchParams = () => ["idPositionScheduledActivity"];
}

_ScheduledActivityLinkedCashTransactionsDataGrid.defaultProps = {
  ...DataGridV2.defaultProps,
  tableKey: "ScheduledActivityLinkedCashTransactionsDataGrid",
  parseTableDataResponse:
    parseScheduledActivityLinkedCashTransactionsDataGridResponse,
  getRows: ScheduledActivityLinkedCashTransactionsDataGridGetRows,
};

export const ScheduledActivityLinkedCashTransactionsDataGrid = connectDataGrid(
  _ScheduledActivityLinkedCashTransactionsDataGrid,
  "ScheduledActivityLinkedCashTransactionsDataGrid",
);
